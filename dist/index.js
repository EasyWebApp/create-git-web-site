#! /usr/bin/env node

//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('index', ["@tech_query/node-toolkit","fs-extra","path","cross-spawn","simple-git/promise","marked","regenerator-runtime/runtime","web-cell/dist/polyfill","web-cell","@babel/polyfill","commander"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('@tech_query/node-toolkit'),require('fs-extra'),require('path'),require('cross-spawn'),require('simple-git/promise'),require('marked'),require('regenerator-runtime/runtime'),require('web-cell/dist/polyfill'),require('web-cell'),require('@babel/polyfill'),require('commander'));
    else
        return  this['index'] = factory.call(self,this['@tech_query/node-toolkit'],this['fs-extra'],this['path'],this['cross-spawn'],this['simple-git/promise'],this['marked'],this['regenerator-runtime/runtime'],this['web-cell/dist/polyfill'],this['web-cell'],this['@babel/polyfill'],this['commander']);

})(function (_tech_query_node_toolkit,fs_extra,path,cross_spawn,simple_git_promise,marked,regenerator_runtime_runtime,web_cell_dist_polyfill,web_cell,_babel_polyfill,commander) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

var _interopRequireDefault2 = require('@babel/runtime/helpers/interopRequireDefault');

var _typeof2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/typeof')
);

var _regenerator = _interopRequireDefault2(
    require('@babel/runtime/regenerator')
);

var _asyncToGenerator2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/asyncToGenerator')
);

var _module_ = {
    './command': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.boot = boot;
            exports.build = build;

            var _nodeToolkit = require('@tech_query/node-toolkit');

            var _core = require('./core');

            var _fsExtra = require('fs-extra');

            var _path = require('path');

            var _crossSpawn = _interopRequireDefault(require('cross-spawn'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * Boot a directory as a Web site
             *
             * @param {String} [cwd='.']                 - Current working directory
             * @param {String} [framework='bootstrap@3'] - Web front-end framework
             * @param {String} [CDN]                     - Base URL to load non-HTML files
             */

            function boot() {
                return _boot.apply(this, arguments);
            }
            /**
             * Build article pages
             *
             * @param {String} [path='.'] - Current working directory
             */

            function _boot() {
                _boot = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee() {
                        var cwd,
                            framework,
                            CDN,
                            _args = arguments;
                        return _regenerator.default.wrap(
                            function _callee$(_context) {
                                while (1) {
                                    switch ((_context.prev = _context.next)) {
                                        case 0:
                                            cwd =
                                                _args.length > 0 &&
                                                _args[0] !== undefined
                                                    ? _args[0]
                                                    : '.';
                                            framework =
                                                _args.length > 1 &&
                                                _args[1] !== undefined
                                                    ? _args[1]
                                                    : 'bootstrap@3';
                                            CDN =
                                                _args.length > 2
                                                    ? _args[2]
                                                    : undefined;
                                            console.time('Boot Web site');
                                            (0, _nodeToolkit.setNPMConfig)(
                                                'web-framework',
                                                framework
                                            );
                                            _context.next = 7;
                                            return (0, _core.bootGit)(cwd);

                                        case 7:
                                            if (
                                                !(0, _fsExtra.existsSync)(
                                                    (0, _path.join)(
                                                        cwd,
                                                        'package.json'
                                                    )
                                                )
                                            )
                                                _crossSpawn.default.sync(
                                                    'npm',
                                                    ['init', '-y'],
                                                    {
                                                        stdio: 'inherit',
                                                        cwd: cwd
                                                    }
                                                );
                                            _context.next = 10;
                                            return (0, _core.setRoot)(cwd);

                                        case 10:
                                            _context.next = 12;
                                            return (0, _core.setHTML)(
                                                cwd,
                                                framework,
                                                CDN
                                            );

                                        case 12:
                                            console.info(
                                                '--------------------'
                                            );
                                            console.timeEnd('Boot Web site');
                                            console.info('');

                                            _crossSpawn.default.sync(
                                                'npm',
                                                ['install'],
                                                {
                                                    stdio: 'inherit',
                                                    cwd: cwd
                                                }
                                            );

                                            _crossSpawn.default.sync(
                                                'npm',
                                                ['install', framework],
                                                {
                                                    stdio: 'inherit',
                                                    cwd: cwd
                                                }
                                            );

                                        case 17:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            },
                            _callee,
                            this
                        );
                    })
                );
                return _boot.apply(this, arguments);
            }

            function build() {
                return _build.apply(this, arguments);
            }

            function _build() {
                _build = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee2() {
                        var path,
                            _ref,
                            doc,
                            article,
                            list,
                            _iteratorNormalCompletion,
                            _didIteratorError,
                            _iteratorError,
                            _iterator,
                            _step,
                            file,
                            _ref2,
                            name,
                            title,
                            description,
                            HTML,
                            _args2 = arguments;

                        return _regenerator.default.wrap(
                            function _callee2$(_context2) {
                                while (1) {
                                    switch ((_context2.prev = _context2.next)) {
                                        case 0:
                                            path =
                                                _args2.length > 0 &&
                                                _args2[0] !== undefined
                                                    ? _args2[0]
                                                    : '.';
                                            _context2.next = 3;
                                            return (0, _fsExtra.readJSON)(
                                                (0, _path.join)(
                                                    path,
                                                    'package.json'
                                                )
                                            );

                                        case 3:
                                            _ref = _context2.sent;
                                            doc = _ref.directories.doc;
                                            (article = (0,
                                            _fsExtra.readdirSync)(
                                                (0, _path.join)(path, doc)
                                            ).filter(function(file) {
                                                return /\.(md|markdown)/i.test(
                                                    file
                                                );
                                            })),
                                                (list = []);

                                            if (article[0]) {
                                                _context2.next = 8;
                                                break;
                                            }

                                            return _context2.abrupt('return');

                                        case 8:
                                            _iteratorNormalCompletion = true;
                                            _didIteratorError = false;
                                            _iteratorError = undefined;
                                            _context2.prev = 11;
                                            _iterator = article[
                                                Symbol.iterator
                                            ]();

                                        case 13:
                                            if (
                                                (_iteratorNormalCompletion = (_step = _iterator.next())
                                                    .done)
                                            ) {
                                                _context2.next = 28;
                                                break;
                                            }

                                            file = _step.value;
                                            _context2.next = 17;
                                            return (0, _core.parseMD)(
                                                (0, _path.join)(path, doc, file)
                                            );

                                        case 17:
                                            _ref2 = _context2.sent;
                                            name = _ref2.name;
                                            title = _ref2.title;
                                            description = _ref2.description;
                                            HTML = _ref2.HTML;
                                            _context2.next = 24;
                                            return (0, _core.renderArticle)(
                                                path,
                                                HTML,
                                                name
                                            );

                                        case 24:
                                            list.push({
                                                name: name,
                                                title: title,
                                                description: description
                                            });

                                        case 25:
                                            _iteratorNormalCompletion = true;
                                            _context2.next = 13;
                                            break;

                                        case 28:
                                            _context2.next = 34;
                                            break;

                                        case 30:
                                            _context2.prev = 30;
                                            _context2.t0 = _context2['catch'](
                                                11
                                            );
                                            _didIteratorError = true;
                                            _iteratorError = _context2.t0;

                                        case 34:
                                            _context2.prev = 34;
                                            _context2.prev = 35;

                                            if (
                                                !_iteratorNormalCompletion &&
                                                _iterator.return != null
                                            ) {
                                                _iterator.return();
                                            }

                                        case 37:
                                            _context2.prev = 37;

                                            if (!_didIteratorError) {
                                                _context2.next = 40;
                                                break;
                                            }

                                            throw _iteratorError;

                                        case 40:
                                            return _context2.finish(37);

                                        case 41:
                                            return _context2.finish(34);

                                        case 42:
                                            (0, _core.renderList)(
                                                (0, _path.join)(
                                                    _core.meta.path,
                                                    'framework',
                                                    (0,
                                                    _nodeToolkit.getNPMConfig)(
                                                        'web-framework'
                                                    ),
                                                    'index.html'
                                                ),
                                                '#Article',
                                                list,
                                                (0, _path.join)(
                                                    path,
                                                    'index.html'
                                                )
                                            );

                                        case 43:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            },
                            _callee2,
                            this,
                            [[11, 30, 34, 42], [35, , 37, 41]]
                        );
                    })
                );
                return _build.apply(this, arguments);
            }
        }
    },
    './core': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.packageNameOf = packageNameOf;
            exports.bootGit = bootGit;
            exports.copyFrom = copyFrom;
            exports.setRoot = setRoot;
            exports.setCDN = setCDN;
            exports.setHTML = setHTML;
            exports.parseMD = parseMD;
            exports.renderArticle = renderArticle;
            exports.renderList = renderList;
            exports.meta = void 0;

            var _nodeToolkit = require('@tech_query/node-toolkit');

            var _path = require('path');

            var _promise = _interopRequireDefault(
                require('simple-git/promise')
            );

            var _fsExtra = require('fs-extra');

            var _marked = _interopRequireDefault(require('marked'));

            require('regenerator-runtime/runtime');

            var _polyfill = _interopRequireDefault(
                require('web-cell/dist/polyfill')
            );

            var _webCell = require('web-cell');

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * @type {Object}
             */

            var meta = (0, _nodeToolkit.packageOf)(
                (0, _nodeToolkit.currentModulePath)()
            );
            /**
             * @param {String} path
             *
             * @return {String}
             */

            exports.meta = meta;

            function packageNameOf(path) {
                return (0, _path.basename)((0, _path.resolve)(path))
                    .toLowerCase()
                    .replace(/[^@\w]+/g, '-');
            }
            /**
             * @param {String} path
             *
             * @return {GitRepository}
             */

            function bootGit(_x) {
                return _bootGit.apply(this, arguments);
            }
            /**
             * @param {String} template - Path relative from this package
             * @param {String} dist     - Path relative from `process.cwd()`
             */

            function _bootGit() {
                _bootGit = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee3(path) {
                        var git, package_name, userID;
                        return _regenerator.default.wrap(
                            function _callee3$(_context3) {
                                while (1) {
                                    switch ((_context3.prev = _context3.next)) {
                                        case 0:
                                            (0, _fsExtra.ensureDirSync)(path);
                                            git = (0, _promise.default)(path);
                                            _context3.next = 4;
                                            return git.checkIsRepo();

                                        case 4:
                                            if (_context3.sent) {
                                                _context3.next = 7;
                                                break;
                                            }

                                            _context3.next = 7;
                                            return git.init();

                                        case 7:
                                            _context3.next = 9;
                                            return git.getRemotes();

                                        case 9:
                                            if (!_context3.sent[0]) {
                                                _context3.next = 11;
                                                break;
                                            }

                                            return _context3.abrupt('return');

                                        case 11:
                                            package_name = packageNameOf(path);
                                            _context3.next = 14;
                                            return git.raw([
                                                'config',
                                                '--get',
                                                'user.name'
                                            ]);

                                        case 14:
                                            userID = _context3.sent;
                                            _context3.next = 17;
                                            return git.addRemote(
                                                'origin',
                                                'https://github.com/'
                                                    .concat(userID, '/')
                                                    .concat(
                                                        package_name,
                                                        '.git'
                                                    )
                                            );

                                        case 17:
                                            return _context3.abrupt(
                                                'return',
                                                git
                                            );

                                        case 18:
                                        case 'end':
                                            return _context3.stop();
                                    }
                                }
                            },
                            _callee3,
                            this
                        );
                    })
                );
                return _bootGit.apply(this, arguments);
            }

            function copyFrom(_x2, _x3) {
                return _copyFrom.apply(this, arguments);
            }
            /**
             * @param {String} path - Project root
             */

            function _copyFrom() {
                _copyFrom = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee4(
                        template,
                        dist
                    ) {
                        var setting,
                            _iteratorNormalCompletion2,
                            _didIteratorError2,
                            _iteratorError2,
                            _iterator2,
                            _step2,
                            file,
                            source,
                            target;

                        return _regenerator.default.wrap(
                            function _callee4$(_context4) {
                                while (1) {
                                    switch ((_context4.prev = _context4.next)) {
                                        case 0:
                                            template = (0, _path.join)(
                                                meta.path,
                                                template
                                            );
                                            _context4.next = 3;
                                            return (0, _fsExtra.copy)(
                                                template,
                                                dist,
                                                {
                                                    overwrite: false
                                                }
                                            );

                                        case 3:
                                            setting = (0, _fsExtra.readdirSync)(
                                                template
                                            ).filter(function(file) {
                                                return (
                                                    (0, _path.extname)(file) ===
                                                    '.json'
                                                );
                                            });
                                            _iteratorNormalCompletion2 = true;
                                            _didIteratorError2 = false;
                                            _iteratorError2 = undefined;
                                            _context4.prev = 7;
                                            _iterator2 = setting[
                                                Symbol.iterator
                                            ]();

                                        case 9:
                                            if (
                                                (_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                                                    .done)
                                            ) {
                                                _context4.next = 28;
                                                break;
                                            }

                                            file = _step2.value;
                                            (source = (0, _path.join)(
                                                template,
                                                file
                                            )),
                                                (target = (0, _path.join)(
                                                    dist,
                                                    file
                                                ));
                                            _context4.t0 = (0,
                                            _fsExtra.outputJSON);
                                            _context4.t1 = target;
                                            _context4.t2 = (0,
                                            _nodeToolkit.patch);
                                            _context4.next = 17;
                                            return (0, _fsExtra.readJSON)(
                                                target
                                            );

                                        case 17:
                                            _context4.t3 = _context4.sent;
                                            _context4.next = 20;
                                            return (0, _fsExtra.readJSON)(
                                                source
                                            );

                                        case 20:
                                            _context4.t4 = _context4.sent;
                                            _context4.t5 = (0, _context4.t2)(
                                                _context4.t3,
                                                _context4.t4
                                            );
                                            _context4.t6 = {
                                                spaces: 4
                                            };
                                            _context4.next = 25;
                                            return (0, _context4.t0)(
                                                _context4.t1,
                                                _context4.t5,
                                                _context4.t6
                                            );

                                        case 25:
                                            _iteratorNormalCompletion2 = true;
                                            _context4.next = 9;
                                            break;

                                        case 28:
                                            _context4.next = 34;
                                            break;

                                        case 30:
                                            _context4.prev = 30;
                                            _context4.t7 = _context4['catch'](
                                                7
                                            );
                                            _didIteratorError2 = true;
                                            _iteratorError2 = _context4.t7;

                                        case 34:
                                            _context4.prev = 34;
                                            _context4.prev = 35;

                                            if (
                                                !_iteratorNormalCompletion2 &&
                                                _iterator2.return != null
                                            ) {
                                                _iterator2.return();
                                            }

                                        case 37:
                                            _context4.prev = 37;

                                            if (!_didIteratorError2) {
                                                _context4.next = 40;
                                                break;
                                            }

                                            throw _iteratorError2;

                                        case 40:
                                            return _context4.finish(37);

                                        case 41:
                                            return _context4.finish(34);

                                        case 42:
                                        case 'end':
                                            return _context4.stop();
                                    }
                                }
                            },
                            _callee4,
                            this,
                            [[7, 30, 34, 42], [35, , 37, 41]]
                        );
                    })
                );
                return _copyFrom.apply(this, arguments);
            }

            function setRoot(_x4) {
                return _setRoot.apply(this, arguments);
            }
            /**
             * @param {String} page - Path of an HTML file
             * @param {String} URI  - CDN base URL
             *
             * @return {JSDOM}
             */

            function _setRoot() {
                _setRoot = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee5(path) {
                        var ignore_0, ignore_1, _ref3, directories;

                        return _regenerator.default.wrap(
                            function _callee5$(_context5) {
                                while (1) {
                                    switch ((_context5.prev = _context5.next)) {
                                        case 0:
                                            _context5.next = 2;
                                            return copyFrom('./template', path);

                                        case 2:
                                            (ignore_0 = (0, _path.join)(
                                                path,
                                                '.gitignore'
                                            )),
                                                (ignore_1 = (0, _path.join)(
                                                    path,
                                                    'gitignore'
                                                ));
                                            if (
                                                (0, _fsExtra.existsSync)(
                                                    ignore_0
                                                )
                                            )
                                                (0, _fsExtra.removeSync)(
                                                    ignore_1
                                                );
                                            else
                                                (0, _fsExtra.moveSync)(
                                                    ignore_1,
                                                    ignore_0
                                                );
                                            if (
                                                !(0, _nodeToolkit.findFile)(
                                                    /ReadMe(\.(md|markdown))?/i,
                                                    path
                                                )
                                            )
                                                (0, _fsExtra.outputFile)(
                                                    (0, _path.join)(
                                                        path,
                                                        'ReadMe.md'
                                                    ),
                                                    '# '.concat(
                                                        packageNameOf(path),
                                                        '\n\nStatic Web site generated by [create-git-web-site](https://web-cell.tk/create-git-web-site/)'
                                                    )
                                                );
                                            _context5.next = 7;
                                            return (0, _fsExtra.readJSON)(
                                                (0, _path.join)(
                                                    path,
                                                    'package.json'
                                                )
                                            );

                                        case 7:
                                            _ref3 = _context5.sent;
                                            directories = _ref3.directories;
                                            (0, _fsExtra.ensureDirSync)(
                                                (0, _path.join)(
                                                    path,
                                                    directories.doc
                                                )
                                            );

                                        case 10:
                                        case 'end':
                                            return _context5.stop();
                                    }
                                }
                            },
                            _callee5,
                            this
                        );
                    })
                );
                return _setRoot.apply(this, arguments);
            }

            function setCDN(_x5, _x6) {
                return _setCDN.apply(this, arguments);
            }
            /**
             * @param {String} path      - Project root
             * @param {String} framework - Web framework
             * @param {String} [CDN]     - CDN base URL
             */

            function _setCDN() {
                _setCDN = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee6(page, URI) {
                        var _page$window,
                            document,
                            URL,
                            resource,
                            _iteratorNormalCompletion3,
                            _didIteratorError3,
                            _iteratorError3,
                            _iterator3,
                            _step3,
                            element,
                            key;

                        return _regenerator.default.wrap(
                            function _callee6$(_context6) {
                                while (1) {
                                    switch ((_context6.prev = _context6.next)) {
                                        case 0:
                                            _context6.next = 2;
                                            return _polyfill.default.fromFile(
                                                page
                                            );

                                        case 2:
                                            page = _context6.sent;
                                            (_page$window = page.window),
                                                (document =
                                                    _page$window.document),
                                                (URL = _page$window.URL);
                                            resource = document.querySelectorAll(
                                                'link[rel="stylesheet"], link[rel="icon"], script[src], ' +
                                                    'img[src], audio[src], video[src]'
                                            );
                                            _iteratorNormalCompletion3 = true;
                                            _didIteratorError3 = false;
                                            _iteratorError3 = undefined;
                                            _context6.prev = 8;

                                            for (
                                                _iterator3 = resource[
                                                    Symbol.iterator
                                                ]();
                                                !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next())
                                                    .done);
                                                _iteratorNormalCompletion3 = true
                                            ) {
                                                element = _step3.value;
                                                key =
                                                    'src' in element
                                                        ? 'src'
                                                        : 'href';
                                                element.setAttribute(
                                                    key,
                                                    new URL(
                                                        element.getAttribute(
                                                            key
                                                        ),
                                                        URI
                                                    )
                                                );
                                            }

                                            _context6.next = 16;
                                            break;

                                        case 12:
                                            _context6.prev = 12;
                                            _context6.t0 = _context6['catch'](
                                                8
                                            );
                                            _didIteratorError3 = true;
                                            _iteratorError3 = _context6.t0;

                                        case 16:
                                            _context6.prev = 16;
                                            _context6.prev = 17;

                                            if (
                                                !_iteratorNormalCompletion3 &&
                                                _iterator3.return != null
                                            ) {
                                                _iterator3.return();
                                            }

                                        case 19:
                                            _context6.prev = 19;

                                            if (!_didIteratorError3) {
                                                _context6.next = 22;
                                                break;
                                            }

                                            throw _iteratorError3;

                                        case 22:
                                            return _context6.finish(19);

                                        case 23:
                                            return _context6.finish(16);

                                        case 24:
                                            return _context6.abrupt(
                                                'return',
                                                page
                                            );

                                        case 25:
                                        case 'end':
                                            return _context6.stop();
                                    }
                                }
                            },
                            _callee6,
                            this,
                            [[8, 12, 16, 24], [17, , 19, 23]]
                        );
                    })
                );
                return _setCDN.apply(this, arguments);
            }

            function setHTML(_x7, _x8, _x9) {
                return _setHTML.apply(this, arguments);
            }
            /**
             * @param {String} file - Path of a MarkDown file
             *
             * @return {Object}
             */

            function _setHTML() {
                _setHTML = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee7(
                        path,
                        framework,
                        CDN
                    ) {
                        var HTML,
                            _iteratorNormalCompletion4,
                            _didIteratorError4,
                            _iteratorError4,
                            _iterator4,
                            _step4,
                            file;

                        return _regenerator.default.wrap(
                            function _callee7$(_context7) {
                                while (1) {
                                    switch ((_context7.prev = _context7.next)) {
                                        case 0:
                                            _context7.next = 2;
                                            return (0, _fsExtra.copy)(
                                                (0, _path.join)(
                                                    meta.path,
                                                    'framework',
                                                    framework
                                                ),
                                                path,
                                                {
                                                    overwrite: false
                                                }
                                            );

                                        case 2:
                                            if (CDN) {
                                                _context7.next = 4;
                                                break;
                                            }

                                            return _context7.abrupt('return');

                                        case 4:
                                            HTML = (0, _fsExtra.readdirSync)(
                                                path
                                            ).filter(function(file) {
                                                return (
                                                    (0, _path.extname)(file) ===
                                                    '.html'
                                                );
                                            });
                                            _iteratorNormalCompletion4 = true;
                                            _didIteratorError4 = false;
                                            _iteratorError4 = undefined;
                                            _context7.prev = 8;
                                            _iterator4 = HTML[
                                                Symbol.iterator
                                            ]();

                                        case 10:
                                            if (
                                                (_iteratorNormalCompletion4 = (_step4 = _iterator4.next())
                                                    .done)
                                            ) {
                                                _context7.next = 23;
                                                break;
                                            }

                                            file = _step4.value;
                                            file = (0, _path.join)(path, file);
                                            _context7.t0 = (0,
                                            _fsExtra.outputFile);
                                            _context7.t1 = file;
                                            _context7.next = 17;
                                            return setCDN(file, CDN);

                                        case 17:
                                            _context7.t2 = _context7.sent.serialize();
                                            _context7.next = 20;
                                            return (0, _context7.t0)(
                                                _context7.t1,
                                                _context7.t2
                                            );

                                        case 20:
                                            _iteratorNormalCompletion4 = true;
                                            _context7.next = 10;
                                            break;

                                        case 23:
                                            _context7.next = 29;
                                            break;

                                        case 25:
                                            _context7.prev = 25;
                                            _context7.t3 = _context7['catch'](
                                                8
                                            );
                                            _didIteratorError4 = true;
                                            _iteratorError4 = _context7.t3;

                                        case 29:
                                            _context7.prev = 29;
                                            _context7.prev = 30;

                                            if (
                                                !_iteratorNormalCompletion4 &&
                                                _iterator4.return != null
                                            ) {
                                                _iterator4.return();
                                            }

                                        case 32:
                                            _context7.prev = 32;

                                            if (!_didIteratorError4) {
                                                _context7.next = 35;
                                                break;
                                            }

                                            throw _iteratorError4;

                                        case 35:
                                            return _context7.finish(32);

                                        case 36:
                                            return _context7.finish(29);

                                        case 37:
                                        case 'end':
                                            return _context7.stop();
                                    }
                                }
                            },
                            _callee7,
                            this,
                            [[8, 25, 29, 37], [30, , 32, 36]]
                        );
                    })
                );
                return _setHTML.apply(this, arguments);
            }

            function parseMD(_x10) {
                return _parseMD.apply(this, arguments);
            }
            /**
             * @param {String} root - Root path of a Web site
             * @param {String} HTML - Content fragment
             * @param {String} file - HTML file name
             */

            function _parseMD() {
                _parseMD = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee8(file) {
                        var raw, line;
                        return _regenerator.default.wrap(
                            function _callee8$(_context8) {
                                while (1) {
                                    switch ((_context8.prev = _context8.next)) {
                                        case 0:
                                            _context8.next = 2;
                                            return (0, _fsExtra.readFile)(file);

                                        case 2:
                                            _context8.t0 = _context8.sent;
                                            raw = _context8.t0 + '';
                                            line = raw
                                                .split(/[\r\n]+/)
                                                .filter(Boolean);
                                            return _context8.abrupt('return', {
                                                name:
                                                    (0, _path.basename)(
                                                        file,
                                                        '.md'
                                                    ) + '.html',
                                                title: line[0].replace(
                                                    /^#\s*/,
                                                    ''
                                                ),
                                                description: line[1],
                                                HTML: (0, _marked.default)(raw)
                                            });

                                        case 6:
                                        case 'end':
                                            return _context8.stop();
                                    }
                                }
                            },
                            _callee8,
                            this
                        );
                    })
                );
                return _parseMD.apply(this, arguments);
            }

            function renderArticle(_x11, _x12, _x13) {
                return _renderArticle.apply(this, arguments);
            }
            /**
             * @param {String}   template - Path of an `index.html` template
             * @param {String}   selector - CSS selector of an Article list
             * @param {Object[]} data
             * @param {String}   target   - Path of a target `index.html`
             */

            function _renderArticle() {
                _renderArticle = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee9(
                        root,
                        HTML,
                        file
                    ) {
                        var page;
                        return _regenerator.default.wrap(
                            function _callee9$(_context9) {
                                while (1) {
                                    switch ((_context9.prev = _context9.next)) {
                                        case 0:
                                            _context9.next = 2;
                                            return _polyfill.default.fromFile(
                                                (0, _path.join)(
                                                    root,
                                                    'article.html'
                                                )
                                            );

                                        case 2:
                                            page = _context9.sent;
                                            page.window.document.querySelector(
                                                'article'
                                            ).innerHTML = HTML;
                                            _context9.next = 6;
                                            return (0, _fsExtra.outputFile)(
                                                (0, _path.join)(
                                                    root,
                                                    'page',
                                                    file
                                                ),
                                                page.serialize()
                                            );

                                        case 6:
                                        case 'end':
                                            return _context9.stop();
                                    }
                                }
                            },
                            _callee9,
                            this
                        );
                    })
                );
                return _renderArticle.apply(this, arguments);
            }

            function renderList(_x14, _x15, _x16, _x17) {
                return _renderList.apply(this, arguments);
            }

            function _renderList() {
                _renderList = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee10(
                        template,
                        selector,
                        data,
                        target
                    ) {
                        var _ref4, document, article, page;

                        return _regenerator.default.wrap(
                            function _callee10$(_context10) {
                                while (1) {
                                    switch (
                                        (_context10.prev = _context10.next)
                                    ) {
                                        case 0:
                                            _context10.next = 2;
                                            return _polyfill.default.fromFile(
                                                template
                                            );

                                        case 2:
                                            _ref4 = _context10.sent;
                                            document = _ref4.window.document;
                                            article = document.querySelector(
                                                selector
                                            );
                                            new _webCell.ArrayView(
                                                article
                                            ).render(data);
                                            _context10.next = 8;
                                            return _polyfill.default.fromFile(
                                                target
                                            );

                                        case 8:
                                            page = _context10.sent;
                                            page.window.document
                                                .querySelector(selector)
                                                .replaceWith(article);
                                            (0, _fsExtra.outputFile)(
                                                target,
                                                page.serialize()
                                            );

                                        case 11:
                                        case 'end':
                                            return _context10.stop();
                                    }
                                }
                            },
                            _callee10,
                            this
                        );
                    })
                );
                return _renderList.apply(this, arguments);
            }
        }
    },
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            require('@babel/polyfill');

            var _commander = _interopRequireDefault(require('commander'));

            var _core = require('./core');

            var _command = require('./command');

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            _commander.default
                .arguments('[path] [option]')
                .option(
                    '-f, --framework <name>',
                    'Web front-end framework',
                    'bootstrap@3'
                )
                .option('--CDN <URL>', 'CDN base URL', /(https?:)?\/\/\S+/);

            _commander.default
                .command('build')
                .description('Build HTML files')
                .action(function() {
                    return (0, _command.build)();
                });

            _commander.default
                .name(_core.meta.meta.name)
                .version(_core.meta.meta.version)
                .description(_core.meta.meta.description)
                .parse(process.argv);

            var args = _commander.default.args.filter(function(item) {
                return (
                    (0, _typeof2.default)(item) === 'object' ||
                    /^[@\w]/.test(item)
                );
            });

            if ((0, _typeof2.default)(args[0]) !== 'object')
                (0, _command.boot)(
                    args[0] || '.',
                    _commander.default.framework,
                    _commander.default.CDN
                );
        }
    },
    '@tech_query/node-toolkit': {
        exports: _tech_query_node_toolkit
    },
    'fs-extra': {
        exports: fs_extra
    },
    path: {
        exports: path
    },
    'cross-spawn': {
        exports: cross_spawn
    },
    'simple-git/promise': {
        exports: simple_git_promise
    },
    marked: {
        exports: marked
    },
    'regenerator-runtime/runtime': {
        exports: regenerator_runtime_runtime
    },
    'web-cell/dist/polyfill': {
        exports: web_cell_dist_polyfill
    },
    'web-cell': {
        exports: web_cell
    },
    '@babel/polyfill': {
        exports: _babel_polyfill
    },
    commander: {
        exports: commander
    }
};

    return _include_('./index');
});